{"ast":null,"code":"/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"https://localhost:5002\";\n\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status === 204) {\n      return null;\n    }\n    const payload = await response.json();\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\r\n * Retrieves all existing jobs.\r\n * @returns {Promise<[job]>}\r\n *  a promise that resolves to a possibly empty array of jobs saved in the database.\r\n */\n\nexport async function listJobs(params, signal) {\n  const url = new URL(`${API_BASE_URL}/jobs`);\n  Object.entries(params).forEach(([key, value]) => url.searchParams.append(key, value.toString()));\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []);\n}\nexport async function createJobs(job, signal) {\n  const url = `${API_BASE_URL}/jobs`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      data: job\n    }),\n    signal\n  };\n  return await fetchJson(url, options, job);\n}\nexport async function deleteJobs(job, signal) {\n  const {\n    job_id\n  } = job;\n  const url = `${API_BASE_URL}/jobs`;\n  const options = {\n    method: 'DELETE',\n    headers,\n    body: JSON.stringify({\n      data: job\n    }),\n    signal\n  };\n  return await fetchJson(url, options, job);\n}\nexport async function updateJob(job, signal) {\n  const {\n    job_id\n  } = job;\n  const url = `${API_BASE_URL}/jobs/${job_id}`;\n  const options = {\n    method: \"PUT\",\n    body: JSON.stringify({\n      data: {\n        ...job\n      }\n    }),\n    headers,\n    signal\n  };\n  return await fetchJson(url, options, job);\n}\nexport async function updateStatus(job_id, status) {\n  const url = `${API_BASE_URL}/jobs/${job_id}/status`;\n  const options = {\n    method: \"PUT\",\n    body: JSON.stringify({\n      data: {\n        status\n      }\n    }),\n    headers\n  };\n  return await fetchJson(url, options);\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","resolve","listJobs","params","signal","URL","Object","entries","forEach","key","value","searchParams","toString","createJobs","job","method","body","JSON","stringify","deleteJobs","job_id","updateJob","updateStatus"],"sources":["C:/Users/parad/Programming/PetProjects/tile_website/frontend/src/utils/api.js"],"sourcesContent":["/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\n\r\n\r\nconst API_BASE_URL =\r\n  process.env.REACT_APP_API_BASE_URL || \"https://localhost:5002\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\nasync function fetchJson(url, options, onCancel) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    const payload = await response.json();\r\n\r\n    if (payload.error) {\r\n      return Promise.reject({ message: payload.error });\r\n    }\r\n    return payload.data;\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing jobs.\r\n * @returns {Promise<[job]>}\r\n *  a promise that resolves to a possibly empty array of jobs saved in the database.\r\n */\r\n\r\nexport async function listJobs(params, signal) {\r\n  const url = new URL(`${API_BASE_URL}/jobs`);\r\n  Object.entries(params).forEach(([key, value]) =>\r\n    url.searchParams.append(key, value.toString())\r\n  );\r\n  return await fetchJson(url, { headers, signal }, [])\r\n}\r\n\r\nexport async function createJobs(job, signal) {\r\n  const url = `${API_BASE_URL}/jobs`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify({ data: job }),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, job);\r\n}\r\n\r\nexport async function deleteJobs(job, signal){\r\n  const { job_id } = job\r\n  const url = `${API_BASE_URL}/jobs`;\r\n  const options = {\r\n    method: 'DELETE',\r\n    headers,\r\n    body: JSON.stringify({data: job}),\r\n    signal\r\n  }\r\n  return await fetchJson(url, options, job)\r\n}\r\n\r\nexport async function updateJob(job, signal) {\r\n  const { job_id } = job;\r\n  const url = `${API_BASE_URL}/jobs/${job_id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    body: JSON.stringify({ data: { ...job } }),\r\n    headers,\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, job);\r\n}\r\n\r\nexport async function updateStatus(job_id, status) {\r\n  const url = `${API_BASE_URL}/jobs/${job_id}/status`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    body: JSON.stringify({ data: { status } }),\r\n    headers,\r\n  };\r\n  return await fetchJson(url, options);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}